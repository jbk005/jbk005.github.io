{"version":3,"sources":["Assets/MarekGrzyb_CV.pdf","Pages/Resume.js","Components/Preloader/main.js","Pages/Main.js","Router.js","serviceWorker.js","index.js"],"names":["Resume","window","location","href","ResumePDF","Component","Preloader","className","size","Main","SiteContent","React","lazy","fallback","Router","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4PAAe,MAA0B,0CCU1BA,E,uKAJP,OADAC,OAAOC,SAASC,KAAOC,EAChB,sE,GAHMC,a,QCYNC,G,6KATP,OACI,yBAAKC,UAAU,aACX,kBAAC,IAAD,CAAWC,KAAM,KACjB,wBAAID,UAAU,QAAd,uB,GALQF,cCeTI,G,+LAVP,IAAMC,EAAcC,IAAMC,MAAK,kBAAM,uDAErC,OACI,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAChB,kBAACH,EAAD,W,GANGL,cCSJS,E,uKATP,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWjB,IACvC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAIC,UAAWR,S,GAL5BJ,aCOfa,EAAcC,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,aDiB7C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB9C,OAAOC,SAASC,MACpD6C,SAAW/C,OAAOC,SAAS8C,OAIvC,OAGF/C,OAAOgD,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,GAAN,sBAEP7B,IAgEV,SAAiCK,EAAOC,GAEtC0B,MAAM3B,GACHK,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7B3B,OAAOC,SAASyD,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC5C/BE,K","file":"static/js/main.d657b7dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/MarekGrzyb_CV.4b55f355.pdf\";","import { Component } from \"react\";\r\nimport ResumePDF from \"../Assets/MarekGrzyb_CV.pdf\";\r\n\r\nclass Resume extends Component {\r\n    render() {\r\n        window.location.href = ResumePDF;\r\n        return \"Please wait... Redirecting you to Bharath Kumar's Resume PDF...\";\r\n    }\r\n}\r\n\r\nexport default Resume;","import React, { Component } from \"react\";\r\nimport MDSpinner from \"react-md-spinner\";\r\nimport \"./main.css\";\r\n\r\nclass Preloader extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Preloader\">\r\n                <MDSpinner size={64} />\r\n                <h1 className=\"Text\">I'm Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preloader;","import React, { Component, Suspense } from \"react\";\r\nimport Preloader from \"../Components/Preloader/main\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"../common.css\";\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        const SiteContent = React.lazy(() => import(\"../Layouts/Default\"))\r\n\r\n        return (\r\n            <Suspense fallback={<Preloader />}>\r\n                <SiteContent />\r\n            </Suspense>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport Resume from \"./Pages/Resume\";\r\nimport Main from \"./Pages/Main\";\r\n\r\nclass Router extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Route exact path=\"/resume\" component={Resume} />\r\n                <Route exact path=\"*\" component={Main} />\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Router;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Router from './Router';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Router />, document.getElementById('SiteRoot'));\r\nserviceWorker.register();"],"sourceRoot":""}